# Configuration options, used by build systems and scripts.

# The name that is advertised.
# Should be 10 characters or less (we need room for compilation date after it)
BLUETOOTH_NAME="Crown"

FIRMWARE_VERSION="undefined"

# The different boards that can be used:
# ## old crownstones
# CROWNSTONE5          0
# PLUGIN_FLEXPRINT_01  1
# ## nordic boards
# PCA10036             40
# PCA10040             41
# ## square guidestone
# GUIDESTONE           100
# ## crownstone builtin
# ACR01B1A             1000
# ACR01B1B             1001
# ACR01B1C             1002
# ACR01B1D             1003
# ACR01B1E             1004
# ## crownstone plug
# ACR01B2A             1500
# ACR01B2B             1501
# ACR01B2C             1502
# ACR01B2E             1503
# ACR01B2F             1504
# HARDWARE_BOARD=ACR01B2C

# The device type defines how the device advertises itself, Apps and Bluenet Library
# will use this to filter for device type.
# It is also used to enable/disable device type specific functionality.
# e.g. power related functionality (switch, power sampling, etc) is only
# available for device type crownstone.
# DEVICE_UNDEF                0
# DEVICE_CROWNSTONE_PLUG      1
# DEVICE_GUIDESTONE           2
# DEVICE_CROWNSTONE_BUILTIN   3
# !! NOTE: the device type is now optional and can be used to overwrite the default
#          defined by the board, see cfg/cs_Boards.c
# DEVICE_TYPE=DEVICE_CROWNSTONE_PLUG

# To avoid confusion when trying to enable functionality through compiler flags, the
# persistent storage for flags is disabled by default, set to 0 if enabling disabling functionality through
# the characteristics / command should be persistently stored!
PERSISTENT_FLAGS_DISABLED=0

# Eddystone is the iBeacon variant of Google, but meant for other purposes, such as Physical Web
EDDYSTONE=0

# Add reset counter at end of name
CHANGE_NAME_ON_RESET=0

# Switches between connectable and non-connectable advertisement to improve scanning on android
ADVERTISEMENT_IMPROVEMENT=1

# Enable or disable meshing (1 or 0)
MESHING=0
BUILD_MESHING=0

# Use separate github repository https://github.com/crownstone/nRF51-ble-bcast-mesh/
MESH_SUBDIR=nRF51-ble-bcast-mesh/nRF51/rbc_mesh

# Build as iBeacon (Crownstone will advertise itself as iBeacon)
IBEACON=1

# Set if crownstone should set power on by default when turning on
# TODO: remove this?
DEFAULT_ON=0

# Sample continuously at a low sample rate (100Hz by default).
# Disables burst sampling.
CONTINUOUS_POWER_SAMPLER=0

# Enable or disable interval scanner, will scann every
# SCAN_SEND_DELAY + SCAN_BRAK_DURATION ms, for SCAN_DURATION ms
# waits for SCAN_SEND_DELAY ms after scan end before sending result
# into mesh (if MESHING enabled)
INTERVAL_SCANNER_ENABLED=0

# Options to save energy
LOW_POWER_MODE=0
PWM_ENABLE=1

# define the iBeacon advertisement package parameters
# the proximity UUID.
# only applies if IBEACON==1
BEACON_UUID="a643423e-e175-4af0-a2e4-31e32f729a8a"
# the major number
BEACON_MAJOR=0
# the minor number
BEACON_MINOR=0
# the rssi
BEACON_RSSI=0xC4

# Set to 1 to enable encryption of BLE Link (reading and writing to characteristics
# needs bonding first)
ENCRYPTION=1
# the default passkey used for bonding. can be changed with configuration charac
STATIC_PASSKEY="123456"

# Enable or disable different services (at times required to preserve memory)
CROWNSTONE_SERVICE=1
INDOOR_SERVICE=1
GENERAL_SERVICE=1
POWER_SERVICE=1
SCHEDULE_SERVICE=1

# Maximum number of vendor specific services
# NOTE: increasing this will also need to increase the RAM_R1_BASE (increasing services by one causes an increase
#  in RAM_R1_BASE by 16 bytes)
MAX_NUM_VS_SERVICES=6

# Enable or disable characteristics
# Crownstone Service
CHAR_CONTROL=1
CHAR_MESHING=1
CHAR_CONFIGURATION=1
CHAR_STATE=1

## General Service
CHAR_TEMPERATURE=1
CHAR_RESET=1

## Power Service
CHAR_PWM=1
CHAR_RELAY=1
CHAR_SAMPLE_CURRENT=1
CHAR_CURRENT_LIMIT=1

## Indoor Localization Service
CHAR_RSSI=1
CHAR_SCAN_DEVICES=1
CHAR_TRACK_DEVICES=0

## Schedule Service
CHAR_SCHEDULE=1

# Size of the master buffer
# Currently this should not be larger than BLE_GATTS_VAR_ATTR_LEN_MAX (512)
MASTER_BUFFER_SIZE=300

# set default operation mode (OPERATION_MODE_NORMAL) at first start, for release, this will need to be
# set to OPERATION_MODE_SETUP so that it first starts into setup mode, but as long as
# we are developing, leave it on normal mode
DEFAULT_OPERATION_MODE=OPERATION_MODE_SETUP

# Verbosity of the UART
# SERIAL_DEBUG     0
# SERIAL_INFO      1
# SERIAL_WARNING   2
# SERIAL_ERROR     3
# SERIAL_FATAL     4
# SERIAL_NONE      5
SERIAL_VERBOSITY=SERIAL_DEBUG

NRF_SERIES=NRF52

# Default transmission power
# Can be: -40, -30, -20, -16, -12, -8, -4, 0, or 4
TX_POWER=4

# Default advertisement interval, in units of 0.625 ms
# Must be between 32 and 16384
# When meshing: must be >= timeslot period used by rbc_mesh (atm 100ms)
ADVERTISEMENT_INTERVAL=160

## Mesh settings ##
MESH_NUM_HANDLES=8
# Number to filter out messages that are not meant for the mesh
MESH_ACCESS_ADDRESS=0xA641A69E
# Minimum interval in ms for broadcasting values of handles (has to be smaller or equal to advertisement interval)
MESH_INTERVAL_MIN_MS=100
# Bluetooth channel to use for the mesh (37, 38, 39)
MESH_CHANNEL=38
# Don't process first mesh messages after boot for some time (ms)
# Max interval of mesh is currently MESH_TRICKLE_I_MAX * MESH_INTERVAL_MIN_MS, which now is 12.8s
MESH_BOOT_TIME=30000

RBC_MESH_DEBUG=0
#RBC_MESH_VALUE_MAX_LEN=104
RBC_MESH_HANDLE_CACHE_ENTRIES=20
RBC_MESH_DATA_CACHE_ENTRIES=10
RBC_MESH_APP_EVENT_QUEUE_LENGTH=16
RADIO_PCNF1_MAXLEN=118UL
RADIO_PCNF0_S1LEN=1UL
RADIO_PCNF0_LFLEN=7UL

# Minimal and maximal environment temperatures in degrees celsius
MIN_ENV_TEMP=2
MAX_ENV_TEMP=10

# Maximal chip temperature in degrees celsius
MAX_CHIP_TEMP=75

# Time (ms) to wait with during booting
BOOT_DELAY=400

# Durations for the scanner in ms
SCAN_DURATION=2000
SCAN_SEND_DELAY=1000
SCAN_BREAK_DURATION=7000

# Default scan filter (do not report these devices in scan result)
# Using a bit mask, set corresponding bits to 1 to filter device OUT
# CROWNSTONE    0
# DOBEACON 		1
# E.g. to filter crownstones and dobeacons: 1 << 0 | 1 << 1 = 3
SCAN_FILTER=3

# Filtered out devices are still sent once every N scan intervals
# Set to 0 to not send them ever
SCAN_FILTER_SEND_FRACTION=360

# Some config introduced by anne
RSSI_ENABLE=1

# connection alive timeout. if no write command received within timeout the connection is closed by the device.
CONNECTION_ALIVE_TIMEOUT=20000

# NOTE: APP_DATA_RESERVED is obsolete. the bootloader obtains the value directly from PSTORAGE_RESERVED defined in
#   include/third/nrf/pstorage_platform.h, but if desired it can still be used to increase the value over the
#   PSTORAGE_RESERVED value (can't decrease the value)
# NOTE: The value has to be a multiple of CODE_PAGE_SIZE which is 0x400 for nrf51 and 0x1000 for nrf52
#
# The value is used to prevent the bootloader from overwriting pstorage data during DFU
# (http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk52.v0.9.0%2Flib_pstorage.html)
# APP_DATA_RESERVED=0x5000

# This is the directory where the cross-compiler resides
COMPILER_PATH=

# The compiler type
COMPILER_TYPE=arm-none-eabi-

# The JLink utility (when using the Segger to flash the nRF)
JLINK=/usr/bin/JLinkExe

# The JLink utilty that can be used with gdb
JLINK_GDB_SERVER=/usr/bin/JLinkGDBServer

# The device can be nRF51822 or nRF52832_xxAA
DEVICE=nRF52832_xxAA

# Use SoftDevice (setting to 0 is untested)
# [18.07.16] do we really want this flag still? Most of our code depends on the
# softdevice being present. disabling this flag won't work without major code changes!!
NRF51_USE_SOFTDEVICE=1

# the directory with /Source and /Include subdirectories from the Nordic SDK
NRF51822_DIR=
# the nordic sdk version
NORDIC_SDK_VERSION=11

# starting with SoftDevice S110 v7 there is no separate UICR section
SOFTDEVICE_NO_SEPARATE_UICR_SECTION=1

BOOTLOADER_START_ADDRESS=0x00079000
# 0x00080000 - BOOTLOADER_START_ADDRESS - 1000 - 1000 = 5000
# Used in: gcc_nrf51_bootloader_xxaa.ld.in and dfu_types.h
# nrf52: length = 0x00080000 - bootloader_start_address - size(bootloader_settings)=0x1000 - size(mbr_params_page)=0x1000
BOOTLOADER_LENGTH=0x5000

# the address (in UICR) where the hardware board type is written and read
HARDWARE_BOARD_ADDRESS=0x10001084

# The directory where the softdevice can be found
# change if you want to use a different softdevice than the ones provided in the SDK
# leave undefined for default
# SOFTDEVICE_DIR=
# The name of the directory where the include files resides of the Softdevice, relative to
# the SOFTDEVICE_DIR, leave undefined for default
# SOFTDEVICE_DIR_API=
# The name of the directory where the hex files resides of the Softdevice, relative to
# the SOFTDEVICE_DIR, leave undefined for default
# SOFTDEVICE_DIR_HEX=

# SOFTDEVICE                           - the name of the SoftDevice (without _softdevice.hex)
# SOFTDEVICE_SERIES                    - the series of the SoftDevice (s110 vs s130 e.g.), used in the code
#
# -- TODO: update the text below --
# For the following examples, suppose the SoftDevice takes 80kB and the application 176kB
# APPLICATION_START_ADDRESS            - 80kB corresponds with 0x00014000 hex
# Check https://devzone.nordicsemi.com/question/15994/nrf51822-iram-and-irom-settings-for-v05-s130-sd/
# APPLICATION_LENGTH                   - 176kB corresponds with 0x2c000 hex, should be 0x40000 - 0x14000
# RAM_R1_BASE                          - starting point for softdevice in RAM
# RAM_APPLICATION_AMOUNT               - size of softdevice in RAM

#######################################################################################################################
# S132 2.0
#######################################################################################################################
SOFTDEVICE_MAJOR=2
SOFTDEVICE_MINOR=0
SOFTDEVICE_SERIES=132
SOFTDEVICE=s132_nrf52_2.0.0

APPLICATION_START_ADDRESS=0x0001C000

# This should be a chip with 512kB, so 0x80000 - 0x1C000 = 0x64000
#
APPLICATION_LENGTH=0x64000
#RAM_R1_BASE=0x20002C00
# For the 64kB chip:
#RAM_APPLICATION_AMOUNT=0xD400
#HEAP_SIZE=5000;

## To enable all services the gatt attribute table size has to be increased, and in turn, the RAM_R1_BASE and
## RAM_APPLICATION_AMOUNT variables have to be adjusted. Default for the ATTR_TABLE_SIZE is 0x580, so if you
## increase the ATTR_TABLE_SIZE, the RAM_R1_BASE has to be increased by the same value and the RAM_APPLICATION_AMOUNT
## has to be decreased by the same value (and most likely the HEAP_SIZE as well), e.g.

# Minimum for the bootloader
RAM_R1_BASE=0x200025E0

ATTR_TABLE_SIZE=0xC00
RAM_R1_BASE=0x200026B8
RAM_APPLICATION_AMOUNT=0xD948

HEAP_SIZE=20000
